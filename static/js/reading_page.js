var pages = document.getElementsByClassName('page');
    for (var i = 0; i < pages.length; i++) {
      var page = pages[i];
      if (i % 2 === 0) {
        page.style.zIndex = (pages.length - i);
      }
    }

    document.addEventListener('DOMContentLoaded', function() {
      for (var i = 0; i < pages.length; i++) {
        pages[i].pageNum = i + 1;
        pages[i].onclick = function() {
          if (this.pageNum % 2 === 0) {
            this.classList.remove('flipped');
            this.previousElementSibling.classList.remove('flipped');
          } else {
            this.classList.add('flipped');
            this.nextElementSibling.classList.add('flipped');
          }
        }
      }
    });
    
    document.addEventListener('DOMContentLoaded', function () {
      // Chuy·ªÉn n·ªÅn t·ªëi
      const darkModeBtn = document.getElementById('toggle-dark-mode');
      darkModeBtn.addEventListener('click', function () {
          document.body.classList.toggle('dark-mode'); 
      });
  
      // Ch·ªçn nh·∫°c v√† ph√°t nh·∫°c
      const musicUpload = document.getElementById('music-upload');
      const chooseMusicBtn = document.getElementById('choose-music');
      const audioPlayer = document.getElementById('audio-player');
      const volumeUp = document.getElementById('volume-up');
      const volumeDown = document.getElementById('volume-down');
  
      chooseMusicBtn.addEventListener('click', function () {
          musicUpload.click(); 
      });
  
      musicUpload.addEventListener('change', function (event) {
          const file = event.target.files[0];
          if (file) {
              const objectURL = URL.createObjectURL(file);
              audioPlayer.src = objectURL;
              audioPlayer.style.display = 'block';
              audioPlayer.play();
          }
      });
  
      // TƒÉng gi·∫£m √¢m l∆∞·ª£ng
      volumeUp.addEventListener('click', function () {
          if (audioPlayer.volume < 1.0) {
              audioPlayer.volume = Math.min(audioPlayer.volume + 0.1, 1.0);
          }
      });
  
      volumeDown.addEventListener('click', function () {
          if (audioPlayer.volume > 0.0) {
              audioPlayer.volume = Math.max(audioPlayer.volume - 0.1, 0.0);
          }
      });
  });
  document.addEventListener('DOMContentLoaded', function () {
    const bookmarkBtn = document.getElementById('bookmark-btn');

    // L·∫Øng nghe s·ª± ki·ªán ƒë√°nh d·∫•u trang
    bookmarkBtn.addEventListener('click', function () {
        let currentPageElement = null;

        // Duy·ªát qua t·∫•t c·∫£ c√°c trang t·ª´ cu·ªëi ƒë·∫øn ƒë·∫ßu ƒë·ªÉ t√¨m trang flipped cu·ªëi c√πng
        for (let i = pages.length - 1; i >= 0; i--) {
            if (pages[i].classList.contains('flipped') && pages[i].getAttribute('data-id') !== 'bia') {
                currentPageElement = pages[i];
                break;
            }
        }

        // N·∫øu kh√¥ng c√≥ trang flipped th√¨ hi·ªÉn th·ªã th√¥ng b√°o
        if (!currentPageElement) {
            alert("‚ùå Kh√¥ng t√¨m th·∫•y trang hi·ªán t·∫°i!");
            return;
        }

        // L·∫•y ID c·ªßa trang hi·ªán t·∫°i
        const currentPage = currentPageElement.getAttribute('data-id');
        console.log("Trang hi·ªán t·∫°i c√≥ ID:", currentPage);

        if (!currentPage) {
            alert("‚ùå Kh√¥ng t√¨m th·∫•y ID c·ªßa trang hi·ªán t·∫°i!");
            return;
        }

        const token = document.querySelector('#token').textContent; // L·∫•y token t·ª´ hidden field
        const user = getUserIdFromToken(token); // L·∫•y user t·ª´ token, n·∫øu c·∫ßn
        if (currentPage === null) {
          alert("‚ùå Kh√¥ng t√¨m th·∫•y trang hi·ªán t·∫°i!");
          return;
      }
        // G·ª≠i AJAX request ƒë·ªÉ ƒë√°nh d·∫•u trang
        fetch('/home-api/reading-sessions/bookmark/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCSRFToken(),
                'Authorization': 'Bearer ' + token
            },
            body: JSON.stringify({
                user_id: user,  // Truy·ªÅn user v√†o
                page: currentPage  // Truy·ªÅn page id v√†o
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert("üìå ƒê√£ ƒë√°nh d·∫•u trang t·∫°i trang " + currentPage);
            } else {
                alert("‚ùå Trang ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u r·ªìi!");
            }
        })
        .catch(error => console.error("L·ªói:", error));
    });

    // H√†m l·∫•y CSRF token t·ª´ cookie Django
    function getCSRFToken() {
        let csrfToken = null;
        document.cookie.split(';').forEach(cookie => {
            if (cookie.trim().startsWith('csrftoken=')) {
                csrfToken = cookie.trim().substring('csrftoken='.length);
            }
        });
        return csrfToken;
    }

    // H√†m l·∫•y ID user t·ª´ token n·∫øu c√≥
    function getUserIdFromToken(token) {
        // Gi·∫£i m√£ token (JWT) ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng (t√πy v√†o c·∫•u tr√∫c token c·ªßa b·∫°n)
        // B·∫°n c√≥ th·ªÉ d√πng th∆∞ vi·ªán nh∆∞ `jwt-decode` n·∫øu c·∫ßn thi·∫øt
        // V√≠ d·ª•:
        const decodedToken = JSON.parse(atob(token.split('.')[1])); // Gi·∫£i m√£ JWT
        return decodedToken.user_id; // Gi·∫£ s·ª≠ user_id c√≥ trong payload c·ªßa token
    }
});
